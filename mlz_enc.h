/*
   mini-LZ library (mlz)
   (c) Martin Sedlak 2016

   Boost Software License - Version 1.0 - August 17th, 2003

   Permission is hereby granted, free of charge, to any person or organization
   obtaining a copy of the software and accompanying documentation covered by
   this license (the "Software") to use, reproduce, display, distribute,
   execute, and transmit the Software, and to prepare derivative works of the
   Software, and to permit third-parties to whom the Software is furnished to
   do so, all subject to the following:

   The copyright notices in the Software and this entire statement, including
   the above license grant, this restriction and the following disclaimer,
   must be included in all copies of the Software, in whole or in part, and
   all derivative works of the Software, unless such copies or derivative
   works are solely in the form of machine-executable object code generated by
   a source language processor.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
   SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
   FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
   ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
   DEALINGS IN THE SOFTWARE.
*/

#ifndef MLZ_ENC_H
#define MLZ_ENC_H

#include "mlz_common.h"

#ifdef __cplusplus
extern "C" {
#endif

extern MLZ_API void *(*mlz_malloc)(size_t);
extern MLZ_API void (*mlz_free)(void *);

struct mlz_matcher;

/* compression level constants */
typedef enum {
	MLZ_LEVEL_FASTEST = 1,
	MLZ_LEVEL_MEDIUM  = 5,
	MLZ_LEVEL_MAX     = 10,
	/* experimental SLOW optimal parsing */
	MLZ_LEVEL_OPTIMAL = 11
} mlz_compression_level;

/* initialize matcher */
MLZ_API mlz_bool
mlz_matcher_init(
	struct mlz_matcher **matcher
);

/* free matcher */
MLZ_API mlz_bool
mlz_matcher_free(
	struct mlz_matcher *matcher
);

/* main compression function, can be used for block-based streaming    */
/* and reuse matcher for subsequent calls to avoid memory reallocation */
MLZ_API size_t
mlz_compress(
	struct mlz_matcher *matcher,
	void               *dst,
	size_t              dst_size,
	MLZ_CONST void     *src,
	size_t              src_size,
	size_t              bytes_before_src,
	int                 level
);

/* straightforward version, manages matcher internally, */
/* doesn't allow streaming                              */
MLZ_API size_t
mlz_compress_simple(
	void           *dst,
	size_t          dst_size,
	MLZ_CONST void *src,
	size_t          src_size,
	int             level
);

#ifdef __cplusplus
}
#endif

#endif
